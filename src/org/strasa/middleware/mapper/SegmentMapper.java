package org.strasa.middleware.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import org.strasa.middleware.model.Segment;
import org.strasa.middleware.model.SegmentExample;
import org.apache.ibatis.annotations.Options;

public interface SegmentMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@SelectProvider(type = SegmentSqlProvider.class, method = "countByExample")
	int countByExample(SegmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@DeleteProvider(type = SegmentSqlProvider.class, method = "deleteByExample")
	int deleteByExample(SegmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@Delete({ "delete from segment",
			"where segment_id = #{segmentId,jdbcType=INTEGER}" })
	int deleteByPrimaryKey(Integer segmentId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@Insert({
			"insert into segment (chromosome, recurrent_parent, ",
			"donor_parent, position_1, ",
			"position_2, position_3, ",
			"position_4, physical_start, ",
			"physical_end, estimated_length, ",
			"minimum_length, maximum_length, ",
			"description)",
			"values (#{chromosome,jdbcType=INTEGER}, #{recurrentParent,jdbcType=VARCHAR}, ",
			"#{donorParent,jdbcType=VARCHAR}, #{position1,jdbcType=DECIMAL}, ",
			"#{position2,jdbcType=DECIMAL}, #{position3,jdbcType=DECIMAL}, ",
			"#{position4,jdbcType=DECIMAL}, #{physicalStart,jdbcType=INTEGER}, ",
			"#{physicalEnd,jdbcType=INTEGER}, #{estimatedLength,jdbcType=DECIMAL}, ",
			"#{minimumLength,jdbcType=DECIMAL}, #{maximumLength,jdbcType=DECIMAL}, ",
			"#{description,jdbcType=VARCHAR})" })
	@Options(useGeneratedKeys = true, keyProperty = "segmentId")
	int insert(Segment record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@InsertProvider(type = SegmentSqlProvider.class, method = "insertSelective")
	@Options(useGeneratedKeys = true, keyProperty = "segmentId")
	int insertSelective(Segment record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@SelectProvider(type = SegmentSqlProvider.class, method = "selectByExample")
	@Results({
			@Result(column = "segment_id", property = "segmentId", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "chromosome", property = "chromosome", jdbcType = JdbcType.INTEGER),
			@Result(column = "recurrent_parent", property = "recurrentParent", jdbcType = JdbcType.VARCHAR),
			@Result(column = "donor_parent", property = "donorParent", jdbcType = JdbcType.VARCHAR),
			@Result(column = "position_1", property = "position1", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_2", property = "position2", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_3", property = "position3", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_4", property = "position4", jdbcType = JdbcType.DECIMAL),
			@Result(column = "physical_start", property = "physicalStart", jdbcType = JdbcType.INTEGER),
			@Result(column = "physical_end", property = "physicalEnd", jdbcType = JdbcType.INTEGER),
			@Result(column = "estimated_length", property = "estimatedLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "minimum_length", property = "minimumLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "maximum_length", property = "maximumLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR) })
	List<Segment> selectByExample(SegmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@Select({
			"select",
			"segment_id, chromosome, recurrent_parent, donor_parent, position_1, position_2, ",
			"position_3, position_4, physical_start, physical_end, estimated_length, minimum_length, ",
			"maximum_length, description", "from segment",
			"where segment_id = #{segmentId,jdbcType=INTEGER}" })
	@Results({
			@Result(column = "segment_id", property = "segmentId", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "chromosome", property = "chromosome", jdbcType = JdbcType.INTEGER),
			@Result(column = "recurrent_parent", property = "recurrentParent", jdbcType = JdbcType.VARCHAR),
			@Result(column = "donor_parent", property = "donorParent", jdbcType = JdbcType.VARCHAR),
			@Result(column = "position_1", property = "position1", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_2", property = "position2", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_3", property = "position3", jdbcType = JdbcType.DECIMAL),
			@Result(column = "position_4", property = "position4", jdbcType = JdbcType.DECIMAL),
			@Result(column = "physical_start", property = "physicalStart", jdbcType = JdbcType.INTEGER),
			@Result(column = "physical_end", property = "physicalEnd", jdbcType = JdbcType.INTEGER),
			@Result(column = "estimated_length", property = "estimatedLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "minimum_length", property = "minimumLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "maximum_length", property = "maximumLength", jdbcType = JdbcType.DECIMAL),
			@Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR) })
	Segment selectByPrimaryKey(Integer segmentId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@UpdateProvider(type = SegmentSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") Segment record,
			@Param("example") SegmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@UpdateProvider(type = SegmentSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") Segment record,
			@Param("example") SegmentExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@UpdateProvider(type = SegmentSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(Segment record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table segment
	 * @mbggenerated  Mon Jan 12 17:00:04 SGT 2015
	 */
	@Update({ "update segment",
			"set chromosome = #{chromosome,jdbcType=INTEGER},",
			"recurrent_parent = #{recurrentParent,jdbcType=VARCHAR},",
			"donor_parent = #{donorParent,jdbcType=VARCHAR},",
			"position_1 = #{position1,jdbcType=DECIMAL},",
			"position_2 = #{position2,jdbcType=DECIMAL},",
			"position_3 = #{position3,jdbcType=DECIMAL},",
			"position_4 = #{position4,jdbcType=DECIMAL},",
			"physical_start = #{physicalStart,jdbcType=INTEGER},",
			"physical_end = #{physicalEnd,jdbcType=INTEGER},",
			"estimated_length = #{estimatedLength,jdbcType=DECIMAL},",
			"minimum_length = #{minimumLength,jdbcType=DECIMAL},",
			"maximum_length = #{maximumLength,jdbcType=DECIMAL},",
			"description = #{description,jdbcType=VARCHAR}",
			"where segment_id = #{segmentId,jdbcType=INTEGER}" })
	int updateByPrimaryKey(Segment record);
}