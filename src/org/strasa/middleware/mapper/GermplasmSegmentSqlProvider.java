package org.strasa.middleware.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import org.strasa.middleware.model.GermplasmSegment;
import org.strasa.middleware.model.GermplasmSegmentExample.Criteria;
import org.strasa.middleware.model.GermplasmSegmentExample.Criterion;
import org.strasa.middleware.model.GermplasmSegmentExample;

public class GermplasmSegmentSqlProvider {

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String countByExample(GermplasmSegmentExample example)
    {
	    BEGIN();
	    SELECT("count(*)");
	    FROM("germplasm_segment");
	    applyWhere(example, false);
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String deleteByExample(GermplasmSegmentExample example)
    {
	    BEGIN();
	    DELETE_FROM("germplasm_segment");
	    applyWhere(example, false);
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String insertSelective(GermplasmSegment record)
    {
	    BEGIN();
	    INSERT_INTO("germplasm_segment");
	    if (record.getGermplasmId() != null)
	    {
		    VALUES("germplasm_id", "#{germplasmId,jdbcType=INTEGER}");
	    }
	    if (record.getSegmentId() != null)
	    {
		    VALUES("segment_id", "#{segmentId,jdbcType=INTEGER}");
	    }
	    if (record.getGermplasmSegmentNumber() != null)
	    {
		    VALUES("germplasm_segment_number",
		            "#{germplasmSegmentNumber,jdbcType=INTEGER}");
	    }
	    if (record.getIshomogenous() != null)
	    {
		    VALUES("isHomogenous", "#{ishomogenous,jdbcType=CHAR}");
	    }
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String selectByExample(GermplasmSegmentExample example)
    {
	    BEGIN();
	    if (example != null && example.isDistinct())
	    {
		    SELECT_DISTINCT("id");
	    } else
	    {
		    SELECT("id");
	    }
	    SELECT("germplasm_id");
	    SELECT("segment_id");
	    SELECT("germplasm_segment_number");
	    SELECT("isHomogenous");
	    FROM("germplasm_segment");
	    applyWhere(example, false);
	    if (example != null && example.getOrderByClause() != null)
	    {
		    ORDER_BY(example.getOrderByClause());
	    }
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String updateByExampleSelective(Map<String, Object> parameter)
    {
	    GermplasmSegment record = (GermplasmSegment) parameter.get("record");
	    GermplasmSegmentExample example = (GermplasmSegmentExample) parameter
	            .get("example");
	    BEGIN();
	    UPDATE("germplasm_segment");
	    if (record.getId() != null)
	    {
		    SET("id = #{record.id,jdbcType=INTEGER}");
	    }
	    if (record.getGermplasmId() != null)
	    {
		    SET("germplasm_id = #{record.germplasmId,jdbcType=INTEGER}");
	    }
	    if (record.getSegmentId() != null)
	    {
		    SET("segment_id = #{record.segmentId,jdbcType=INTEGER}");
	    }
	    if (record.getGermplasmSegmentNumber() != null)
	    {
		    SET("germplasm_segment_number = #{record.germplasmSegmentNumber,jdbcType=INTEGER}");
	    }
	    if (record.getIshomogenous() != null)
	    {
		    SET("isHomogenous = #{record.ishomogenous,jdbcType=CHAR}");
	    }
	    applyWhere(example, true);
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String updateByExample(Map<String, Object> parameter)
    {
	    BEGIN();
	    UPDATE("germplasm_segment");
	    SET("id = #{record.id,jdbcType=INTEGER}");
	    SET("germplasm_id = #{record.germplasmId,jdbcType=INTEGER}");
	    SET("segment_id = #{record.segmentId,jdbcType=INTEGER}");
	    SET("germplasm_segment_number = #{record.germplasmSegmentNumber,jdbcType=INTEGER}");
	    SET("isHomogenous = #{record.ishomogenous,jdbcType=CHAR}");
	    GermplasmSegmentExample example = (GermplasmSegmentExample) parameter
	            .get("example");
	    applyWhere(example, true);
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    public String updateByPrimaryKeySelective(GermplasmSegment record)
    {
	    BEGIN();
	    UPDATE("germplasm_segment");
	    if (record.getGermplasmId() != null)
	    {
		    SET("germplasm_id = #{germplasmId,jdbcType=INTEGER}");
	    }
	    if (record.getSegmentId() != null)
	    {
		    SET("segment_id = #{segmentId,jdbcType=INTEGER}");
	    }
	    if (record.getGermplasmSegmentNumber() != null)
	    {
		    SET("germplasm_segment_number = #{germplasmSegmentNumber,jdbcType=INTEGER}");
	    }
	    if (record.getIshomogenous() != null)
	    {
		    SET("isHomogenous = #{ishomogenous,jdbcType=CHAR}");
	    }
	    WHERE("id = #{id,jdbcType=INTEGER}");
	    return SQL();
    }

	/**
     * This method was generated by MyBatis Generator. This method corresponds to the database table germplasm_segment
     * @mbggenerated  Thu Jun 26 14:16:41 PHT 2014
     */
    protected void applyWhere(GermplasmSegmentExample example,
            boolean includeExamplePhrase)
    {
	    if (example == null)
	    {
		    return;
	    }
	    String parmPhrase1;
	    String parmPhrase1_th;
	    String parmPhrase2;
	    String parmPhrase2_th;
	    String parmPhrase3;
	    String parmPhrase3_th;
	    if (includeExamplePhrase)
	    {
		    parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
		    parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
		    parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
		    parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
		    parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
		    parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
	    } else
	    {
		    parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
		    parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
		    parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
		    parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
		    parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
		    parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
	    }
	    StringBuilder sb = new StringBuilder();
	    List<Criteria> oredCriteria = example.getOredCriteria();
	    boolean firstCriteria = true;
	    for (int i = 0; i < oredCriteria.size(); i++)
	    {
		    Criteria criteria = oredCriteria.get(i);
		    if (criteria.isValid())
		    {
			    if (firstCriteria)
			    {
				    firstCriteria = false;
			    } else
			    {
				    sb.append(" or ");
			    }
			    sb.append('(');
			    List<Criterion> criterions = criteria.getAllCriteria();
			    boolean firstCriterion = true;
			    for (int j = 0; j < criterions.size(); j++)
			    {
				    Criterion criterion = criterions.get(j);
				    if (firstCriterion)
				    {
					    firstCriterion = false;
				    } else
				    {
					    sb.append(" and ");
				    }
				    if (criterion.isNoValue())
				    {
					    sb.append(criterion.getCondition());
				    } else if (criterion.isSingleValue())
				    {
					    if (criterion.getTypeHandler() == null)
					    {
						    sb.append(String.format(parmPhrase1,
						            criterion.getCondition(), i, j));
					    } else
					    {
						    sb.append(String.format(parmPhrase1_th,
						            criterion.getCondition(), i, j,
						            criterion.getTypeHandler()));
					    }
				    } else if (criterion.isBetweenValue())
				    {
					    if (criterion.getTypeHandler() == null)
					    {
						    sb.append(String.format(parmPhrase2,
						            criterion.getCondition(), i, j, i, j));
					    } else
					    {
						    sb.append(String.format(parmPhrase2_th,
						            criterion.getCondition(), i, j,
						            criterion.getTypeHandler(), i, j,
						            criterion.getTypeHandler()));
					    }
				    } else if (criterion.isListValue())
				    {
					    sb.append(criterion.getCondition());
					    sb.append(" (");
					    List<?> listItems = (List<?>) criterion.getValue();
					    boolean comma = false;
					    for (int k = 0; k < listItems.size(); k++)
					    {
						    if (comma)
						    {
							    sb.append(", ");
						    } else
						    {
							    comma = true;
						    }
						    if (criterion.getTypeHandler() == null)
						    {
							    sb.append(String.format(parmPhrase3, i, j, k));
						    } else
						    {
							    sb.append(String.format(parmPhrase3_th, i, j,
							            k, criterion.getTypeHandler()));
						    }
					    }
					    sb.append(')');
				    }
			    }
			    sb.append(')');
		    }
	    }
	    if (sb.length() > 0)
	    {
		    WHERE(sb.toString());
	    }
    }
}